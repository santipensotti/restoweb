@page "/Resto/{restoId}"
@inject HttpClient Http
@using BlazorAppWithServer.Shared.Models

<h3>Menú del Restaurante @restoId</h3>

@if (error != null)
{
    <div class="alert alert-danger">@error</div>
}

@if (menuItems?.Any() == true)
{
    <ul class="list-group">
        @foreach (var item in menuItems)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@item.Name</span>
                <span class="badge bg-primary rounded-pill">
                    @item.Price.ToString("C0", new System.Globalization.CultureInfo("es-AR"))
                </span>
                <button class="btn btn-danger btn-sm ms-2" @onclick="@(() => EliminarItem(item))">Eliminar</button>
            </li>
        }
    </ul>
}
else
{
    <p>No hay ítems disponibles en el menú.</p>
}

<hr />

<div class="row g-3 align-items-center mb-3">
    <div class="col-auto">
        <input type="text" class="form-control" placeholder="Nombre" @bind="name" required />
    </div>
    <div class="col-auto">
        <input type="number" class="form-control" placeholder="Precio" @bind="price" required />
    </div>
    <div class="col-auto">
        <button class="btn btn-primary" @onclick="AgregarItem">Agregar</button>
    </div>
</div>

<div class="container mt-4 d-flex flex-column align-items-start ms-3">
    <h3 class="mb-3">Pedidos por Mesa</h3>

    @if (tableOrders?.Any() == true)
    {
        @foreach (var table in tableOrders)
        {
            <div class="mb-4 w-100">
                <h4 class="mb-2">Mesa @table.Key</h4>
                <ul class="list-unstyled">
                    @foreach (var order in table.Value)
                    {
                        <li class="d-flex justify-content-between align-items-center mb-3 p-3 bg-light rounded shadow-sm">
                            <span>@order.MenuItem.Name</span>
                            <span class="badge bg-secondary">@order.State</span> <!-- Mostrar el estado -->
                            <div class="d-flex">
                                <!-- Botón Preparando -->
                                <button class="btn btn-warning btn-sm ms-2" @onclick="() => ActualizarEstadoOrden(table.Key, order.OrderId, OrderState.Cooking)">
                                    Preparando
                                </button>
                                <!-- Botón Entregado -->
                                <button class="btn btn-success btn-sm ms-2" @onclick="() => ActualizarEstadoOrden(table.Key, order.OrderId, OrderState.Delivered)">
                                    Entregado
                                </button>
                                <!-- Botón Eliminar -->
                                <button class="btn btn-secondary btn-sm ms-2" @onclick="() => EliminarOrden(table.Key, order.OrderId)">
                                    Eliminar
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }
    }
    else
    {
        <p>No hay órdenes en este momento.</p>
    }
</div>

@code {
    [Parameter]
    public string restoId { get; set; }

    private List<MenuItem> menuItems = new List<MenuItem>();
    private string? name;
    private int? price;
    private int tableCount;
    private string error;


    private Dictionary<int, List<Order>> tableOrders = new Dictionary<int, List<Order>>(); // Cambiado a Order

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadOrdersByRestaurant();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
        await LoadOrdersByRestaurant();
    }

    private async Task LoadData()
    {
        try
        {
            var restaurantId = int.Parse(restoId);
            menuItems = await Http.GetFromJsonAsync<List<MenuItem>>($"api/order/menu/{restaurantId}");
            var response = await Http.GetAsync($"api/restaurant/tables/{restaurantId}");
            if (response.IsSuccessStatusCode)
            {
                tableCount = await response.Content.ReadFromJsonAsync<int>();
            }
        }
        catch (Exception ex)
        {
            error = $"Error al cargar datos: {ex.Message}";
        }
    }

    private async Task LoadOrdersByRestaurant()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<Dictionary<int, List<Order>>>($"api/order/tableOrders/{restoId}");
            if (response != null)
            {
                tableOrders = response;
            }
        }
        catch (Exception ex)
        {
            error = $"Error al cargar órdenes: {ex.Message}";
        }
    }

    private async Task AgregarItem()
    {
        if (!string.IsNullOrWhiteSpace(name) && price.HasValue)
        {
            try
            {
                var response = await Http.PostAsJsonAsync($"api/restaurant/menuitem", new 
                { 
                    RestaurantId = int.Parse(restoId),
                    Name = name,
                    Price = price.Value
                });

                if (response.IsSuccessStatusCode)
                {
                    await LoadData();
                    name = "";
                    price = 0;
                }
                else
                {
                    error = "Error al agregar el ítem";
                }
            }
            catch (Exception ex)
            {
                error = $"Error: {ex.Message}";
            }
        }
    }

    private async Task EliminarItem(MenuItem item)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/restaurant/menuitem/{restoId}/{item.Name}");
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
            }
            else
            {
                error = "Error al eliminar el ítem";
            }
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
        }
    }

   private async Task ActualizarEstadoOrden(int tableId, int orderId, OrderState newState)
{
    try
    {
        var response = await Http.PostAsJsonAsync("api/order/updateState", new OrderDeliveryRequest
        {
            RestoId = int.Parse(restoId),
            TableId = tableId,
            OrderId = orderId,
            NewState = newState
        });

        if (response.IsSuccessStatusCode)
        {
            await LoadOrdersByRestaurant();
        }
        else
        {
            error = $"Error al actualizar el estado de la orden: {orderId}";
        }
    }
    catch (Exception ex)
    {
        error = $"Error: {ex.Message}";
    }
}

    private async Task EliminarOrden(int tableId, int orderId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/order/{restoId}/{tableId}/{orderId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadOrdersByRestaurant();
            }
            else
            {
                error = $"Error al eliminar la orden: {orderId}";
            }
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
        }
    }
}
