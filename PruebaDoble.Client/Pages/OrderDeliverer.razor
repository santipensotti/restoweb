@* @page "/orderdeliverer"
@inject HttpClient Http
@using BlazorAppWithServer.Shared.Models

<h3>Pedidos Pendientes</h3>

@if (error != null)
{
    <div class="alert alert-danger">@error</div>
}

<div class="container mt-4">
    @if (loading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }
    else
    {
        @foreach (var table in Enumerable.Range(1, 3))
        {
            @if (ordersByTable.ContainsKey(table) && ordersByTable[table].Any())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Mesa @table</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-group">
                            @{
                                var groupedOrders = ordersByTable[table]
                                    .GroupBy(o => o)
                                    .Select(g => new { Item = g.Key, Count = g.Count() });
                            }
                            @foreach (var order in groupedOrders)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@order.Item</span>
                                    <div>
                                        <span class="badge bg-primary me-2">Cantidad: @order.Count</span>
                                        <button class="btn btn-success btn-sm" @onclick="() => MarkAsDelivered(table, order.Item)">
                                            Entregar
                                        </button>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    private Dictionary<int, List<string>> ordersByTable = new();
    private string error;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            loading = true;
            ordersByTable.Clear();
            
            for (int table = 1; table <= 3; table++)
            {
                var response = await Http.GetAsync($"api/order/messages/{table}");
                
                if (response.IsSuccessStatusCode)
                {
                    var orders = await response.Content.ReadFromJsonAsync<List<string>>();
                    if (orders != null && orders.Any())
                    {
                        ordersByTable[table] = orders;
                    }
                }
                else
                {
                    error = $"Error al cargar pedidos de la mesa {table}";
                }
            }
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
            Console.WriteLine($"Error detallado: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task MarkAsDelivered(int tableId, string order)
    {
        try
        {
            var request = new OrderDeliveryRequest 
            { 
                TableId = tableId, 
                Order = order 
            };
            
            var response = await Http.PostAsJsonAsync("api/order/deliver", request);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadOrders(); // Recargar los pedidos despu√©s de marcar como entregado
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                error = $"Error al marcar el pedido como entregado: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
            Console.WriteLine($"Error detallado: {ex}");
        }
    }
} *@
