@page "/ver-restaurantes"
@inject HttpClient Http
@inject NavigationManager Navigation
@using BlazorAppWithServer.Shared.Models

<div class="container py-5 min-vh-100">
    <div class="row justify-content-center mb-4">
        <div class="col-lg-8">
            <div class="text-center">
                <h1 class="display-5 fw-bold text-primary mb-2">Restaurantes Existentes</h1>
                <p class="lead text-muted">Consulta la lista de restaurantes, edita detalles o administra sus mesas</p>
            </div>
        </div>
    </div>

    @if (restaurants != null)
    {
        <div class="row g-4 justify-content-center">
            @foreach (var restaurant in restaurants)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-lg h-100 border-0">
                        <div class="card-header bg-primary text-white text-center rounded-top">
                            <h5 class="mb-0">@restaurant.Name</h5>
                        </div>
                        <div class="card-body d-flex flex-column align-items-center">
                            <button class="btn btn-outline-primary w-100 mb-3" @onclick="() => ToggleDetails(restaurant.Id)">
                                @(restaurant.ShowDetails ? "Ocultar Detalles" : "Ver Detalles")
                            </button>
                            @if (restaurant.ShowDetails)
                            {
                                <div class="details w-100">
                                    <ul class="list-group list-group-flush mb-3">
                                        <li class="list-group-item"><strong>Mesas:</strong> @restaurant.TablesCount</li>
                                        <li class="list-group-item"><strong>Latitud:</strong> @restaurant.Latitude</li>
                                        <li class="list-group-item"><strong>Longitud:</strong> @restaurant.Longitude</li>
                                    </ul>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-info flex-fill" @onclick="() => EditRestaurant(restaurant.Id)">
                                            Editar
                                        </button>
                                        <button class="btn btn-warning flex-fill" @onclick="() => AdminRestaurant(restaurant.Id)">
                                            Administrar
                                        </button>
                                        <button class="btn btn-success flex-fill" @onclick="() => GenerateAllQRCodes(restaurant.Id, restaurant.TablesCount)">
                                            Generar QR
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 300px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <span class="fs-5 text-muted">Cargando restaurantes...</span>
        </div>
    }
</div>

@code {
    private List<RestaurantViewModel> restaurants;

    protected override async Task OnInitializedAsync()
    {
        await LoadRestaurants();
        _ = StartAutoRefresh();
    }

    private async Task StartAutoRefresh()
    {
        while (true)
        {
            await Task.Delay(100000);
            await LoadRestaurants();
            StateHasChanged();
        }
    }

    private async Task LoadRestaurants()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<RestaurantViewModel>>("api/restaurant/all");
            restaurants = response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando restaurantes: {ex.Message}");
        }
    }

    private void ToggleDetails(int restaurantId)
    {
        var restaurant = restaurants.FirstOrDefault(r => r.Id == restaurantId);
        if (restaurant != null)
        {
            restaurant.ShowDetails = !restaurant.ShowDetails;
        }
    }

    private void EditRestaurant(int id)
    {
        Navigation.NavigateTo($"/editar-restaurante/{id}");
    }

    private void AdminRestaurant(int id)
    {
        Navigation.NavigateTo($"/Resto/{id}");
    }

    private void GenerateAllQRCodes(int restaurantId, int tablesCount)
    {
        Navigation.NavigateTo($"/qr/{restaurantId}/{tablesCount}");
    }
}
