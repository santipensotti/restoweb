@page "/table/{restoId}/{tableId}"
@inject HttpClient Http
@using System.Text.Json
@using BlazorAppWithServer.Shared.Models

<PageTitle>Mesa @tableId</PageTitle>

<div class="d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card shadow-lg p-4" style="min-width: 400px; max-width: 700px; width: 100%;">
        <div class="card-body">
            <h2 class="card-title text-center mb-3">Mesa @tableId</h2>
            <h6 class="card-subtitle mb-4 text-muted text-center">Realizá tu pedido desde el menú</h6>

            @if (error != null)
            {
                <div class="alert alert-danger text-center">@error</div>
            }

            @if (menuItems != null && menuItems.Any())
            {
                <div class="row">
                    @foreach (var item in menuItems)
                    {
                        <div class="col-md-6 mb-4">
                            <div class="card h-100 border-0 shadow-sm">
                                <div class="card-body d-flex flex-column align-items-center">
                                    <h5 class="card-title">@item.Name</h5>
                                    <p class="card-text text-primary fs-5">$@item.Price</p>
                                    <div class="d-flex align-items-center mb-2">
                                        <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => DecreaseQuantity(item.Name)">-</button>
                                        <span class="fs-5 px-2">@GetQuantity(item.Name)</span>
                                        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="() => IncreaseQuantity(item.Name)">+</button>
                                    </div>
                                    <button class="btn btn-primary w-100 mt-auto" @onclick="() => AddToOrder(item.Name)">
                                        Ordenar
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-center text-muted">No hay ítems en el menú.</p>
            }

            @if (orders?.Any() == true)
            {
                <div class="mt-4">
                    <h4 class="text-center mb-3">Pedidos Actuales</h4>
                    <ul class="list-group">
                        @foreach (var order in orders)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span><strong>@order.MenuItem.Name</strong></span>
                                <span class="badge bg-@(GetBadgeColor(order.State.ToString()))">@order.State</span>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string restoId { get; set; }

    [Parameter]
    public string tableId { get; set; }

    private List<MenuItem> menuItems = new List<MenuItem>();
    private List<Order> orders = new List<Order>();
    private Dictionary<string, int> quantities = new Dictionary<string, int>();
    private string error;

    private Timer pollingTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        StartPolling();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            menuItems = await Http.GetFromJsonAsync<List<MenuItem>>($"api/order/menu/{restoId}");
            var response = await Http.GetFromJsonAsync<List<Order>>($"api/order/tableOrders/{restoId}/{tableId}");
            orders = response ?? new List<Order>();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar datos: {ex.Message}";
            Console.WriteLine($"Error detallado: {ex}");
        }
    }

    private void StartPolling()
    {
        pollingTimer = new Timer(async _ =>
        {
            try
            {
                var response = await Http.GetFromJsonAsync<List<Order>>($"api/order/tableOrders/{restoId}/{tableId}");
                if (response != null && !response.SequenceEqual(orders))
                {
                    orders = response;
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {
                error = $"Error al realizar la consulta: {ex.Message}";
                Console.WriteLine($"Error detallado: {ex}");
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(5)); 
    }

    private void IncreaseQuantity(string itemName)
    {
        if (quantities.ContainsKey(itemName))
        {
            quantities[itemName]++;
        }
        else
        {
            quantities[itemName] = 1;
        }
    }

    private void DecreaseQuantity(string itemName)
    {
        if (quantities.ContainsKey(itemName) && quantities[itemName] > 0)
        {
            quantities[itemName]--;
            if (quantities[itemName] == 0)
            {
                quantities.Remove(itemName);
            }
        }
    }

    private int GetQuantity(string itemName)
    {
        return quantities.ContainsKey(itemName) ? quantities[itemName] : 0;
    }

    private async Task AddToOrder(string itemName)
    {
        try
        {
            if (!quantities.ContainsKey(itemName) || quantities[itemName] == 0)
            {
                error = "La cantidad debe ser mayor a 0";
                return;
            }

            int quantity = quantities[itemName];
            for (int i = 0; i < quantity; i++)
            {
                var request = new OrderRequest 
                { 
                    RestoId = int.Parse(restoId),
                    TableId = int.Parse(tableId), 
                    MenuItem = new MenuItem { Name = itemName, Price = 0 }
                };

                var response = await Http.PostAsJsonAsync("api/order/send", request);
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    error = $"Error al enviar el pedido: {errorContent}";
                    return;
                }
            }

            await LoadData();
            quantities[itemName] = 0;
        }
        catch (Exception ex)
        {
            error = $"Error al agregar pedido: {ex.Message}";
        }
    }

    public void Dispose()
    {
        pollingTimer?.Dispose();
    }

    // Badge color por string (más seguro si los enums cambian)
    private string GetBadgeColor(string state)
    {
        return state switch
        {
            "Pendiente" or "Pending" => "warning",
            "EnPreparacion" or "InPreparation" => "info",
            "Listo" or "Ready" => "success",
            _ => "secondary"
        };
    }
}